// C:\Users\HOME\OneDrive\Desktop\book my saloon\book my salon backend\routes\Auth.js

const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
require('dotenv').config();

const User = require('../models/User');
// OTP Model ‡∞®‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Æ‡±Å ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡∞Ç‡∞ü‡±á Twilio Verify Service ‡∞®‡±Å ‡∞µ‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å
// const OTP = require('../models/OTP'); 

// 6-‡∞Ö‡∞Ç‡∞ï‡±Ü‡∞≤ OTP ‡∞®‡∞ø ‡∞ú‡∞®‡∞∞‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø - Twilio ‡∞µ‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞á‡∞¶‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç ‡∞≤‡±á‡∞¶‡±Å
// function generateOTP() {
//     return Math.floor(100000 + Math.random() * 900000).toString();
// }

// ‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç ‡∞ü‡±ã‡∞ï‡±Ü‡∞®‡±ç‚Äå‡∞®‡±Å ‡∞ú‡∞®‡∞∞‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï ‡∞´‡∞Ç‡∞ï‡±ç‡∞∑‡∞®‡±ç
function generateUserToken(userId) {
    return jwt.sign({ userId: userId }, process.env.JWT_SECRET, { expiresIn: '1h' });
}

// Twilio Verify Service ‡∞®‡∞ø ‡∞Ü‡∞∞‡±ç‡∞ó‡±ç‡∞Ø‡±Å‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç ‡∞ó‡∞æ ‡∞∏‡±ç‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø module.exports ‡∞®‡∞ø ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø
module.exports = (twilioVerifyService) => {

    // POST /api/auth/send-otp (‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç ‡∞∏‡±à‡∞®‡±ç‡∞Ö‡∞™‡±ç/‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç)
    router.post('/send-otp', async (req, res) => {
        try {
            const { phoneNumber, mode, fullName } = req.body;

            console.log('üì® User Send OTP request received:', { phoneNumber, mode, fullName });

            if (!phoneNumber || !mode) {
                return res.status(400).json({ success: false, message: 'Phone number and mode are required.' });
            }
            if (mode !== 'user-signup' && mode !== 'user-login') {
                return res.status(400).json({ success: false, message: 'Invalid mode for User OTP request. Use "user-signup" or "user-login".' });
            }

            const fullPhoneNumber = phoneNumber; // ‡∞á‡∞¶‡∞ø ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á +91 ‡∞§‡±ã ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞®‡∞ø ‡∞Ö‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å

            // Optional: Twilio service ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞Ç‡∞¶‡±ã ‡∞≤‡±á‡∞¶‡±ã ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
            if (!twilioVerifyService) {
                console.warn('Twilio Verify Service not initialized for Auth. Cannot send OTP.');
                return res.status(500).json({ success: false, message: 'OTP service is currently unavailable. Please check server logs.' });
            }

            let existingUser = await User.findOne({ phoneNumber: fullPhoneNumber });

            if (mode === 'user-signup') {
                if (existingUser) {
                    return res.status(409).json({
                        success: false,
                        message: 'This phone number is already registered as a Customer. Please login.',
                        action: 'redirect_to_login'
                    });
                }
                // Twilio ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ OTP ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø
                const verification = await twilioVerifyService.verifications.create({
                    to: fullPhoneNumber,
                    channel: 'sms',
                });
                console.log(`‚úÖ USER SIGNUP OTP sent via Twilio for ${fullPhoneNumber}. Verification SID: ${verification.sid}`);
                return res.json({
                    success: true,
                    message: 'Customer OTP sent successfully.',
                    // _testOTP: otp // Twilio ‡∞µ‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞á‡∞¶‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç ‡∞≤‡±á‡∞¶‡±Å
                });
            }

            if (mode === 'user-login') {
                if (!existingUser) {
                    return res.status(404).json({
                        success: false,
                        message: 'Customer account not registered. Please sign up first.',
                        action: 'redirect_to_register'
                    });
                }
                // Twilio ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ OTP ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø
                const verification = await twilioVerifyService.verifications.create({
                    to: fullPhoneNumber,
                    channel: 'sms',
                });
                console.log(`‚úÖ CUSTOMER LOGIN OTP sent via Twilio for ${fullPhoneNumber}. Verification SID: ${verification.sid}`);
                return res.json({
                    success: true,
                    message: 'Customer account detected. OTP sent.',
                    isPartner: false,
                    // _testOTP: otp // Twilio ‡∞µ‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞á‡∞¶‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç ‡∞≤‡±á‡∞¶‡±Å
                });
            }

            return res.status(400).json({ success: false, message: 'Invalid or missing mode for OTP request.' });

        } catch (err) {
            console.error('‚ùå User Send OTP Error (Twilio):', err);
            let errorMessage = 'Failed to send OTP. Please check the phone number and try again.';
            if (err.status === 400 && err.code === 21211) {
                errorMessage = 'Invalid phone number format. Please ensure it includes the country code (e.g., +91).';
            } else if (err.status === 429) {
                errorMessage = 'Too many OTP requests. Please try again later.';
            }
            res.status(500).json({ success: false, message: errorMessage, twilioError: err.message });
        }
    });

    // POST /api/auth/verify-otp (‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç ‡∞∏‡±à‡∞®‡±ç‡∞Ö‡∞™‡±ç/‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç)
    router.post('/verify-otp', async (req, res) => {
        try {
            const { phoneNumber, otp, mode } = req.body;

            console.log('‚úÖ User Verify OTP request received:', { phoneNumber, otp, mode });

            if (!phoneNumber || !otp || !mode) {
                return res.status(400).json({ success: false, message: 'Phone number, OTP, and mode are required.' });
            }
            if (mode !== 'user-signup' && mode !== 'user-login') {
                return res.status(400).json({ success: false, message: 'Invalid mode for User OTP verification. Use "user-signup" or "user-login".' });
            }

            const fullPhoneNumber = phoneNumber; // ‡∞á‡∞¶‡∞ø ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á +91 ‡∞§‡±ã ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞®‡∞ø ‡∞Ö‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å

            // Optional: Twilio service ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞Ç‡∞¶‡±ã ‡∞≤‡±á‡∞¶‡±ã ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
            if (!twilioVerifyService) {
                console.warn('Twilio Verify Service not initialized for Auth. Cannot verify OTP.');
                return res.status(500).json({ success: false, message: 'OTP verification service is currently unavailable. Please check server logs.' });
            }

            // Twilio ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ OTP ‡∞®‡∞ø ‡∞µ‡±Ü‡∞∞‡∞ø‡∞´‡±à ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
            const verificationCheck = await twilioVerifyService.verificationChecks.create({
                to: fullPhoneNumber,
                code: otp,
            });

            if (verificationCheck.status === 'approved') {
                console.log(`‚úÖ User OTP verified for ${fullPhoneNumber} in mode: ${mode}`);

                if (mode === 'user-signup') {
                    let user = await User.findOne({ phoneNumber: fullPhoneNumber });
                    if (!user) {
                        const userName = req.body.name || `User ${phoneNumber.slice(-4)}`;
                        user = new User({ phoneNumber: fullPhoneNumber, name: userName });
                        await user.save();
                        console.log(`‚úÖ New User account created: ${user.name} (${user.phoneNumber})`);
                    }
                    const token = generateUserToken(user._id);
                    return res.json({
                        success: true,
                        message: 'User account created and logged in successfully.',
                        token,
                        user: { _id: user._id, name: user.name, isPartner: false }
                    });
                }

                if (mode === 'user-login') {
                    const user = await User.findOne({ phoneNumber: fullPhoneNumber });
                    if (!user) {
                        // ‡∞á‡∞¶‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞ú‡∞∞‡∞ó‡∞ï‡±Ç‡∞°‡∞¶‡±Å, send-otp ‡∞≤‡±ã‡∞®‡±á ‡∞ö‡±Ü‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø
                        return res.status(404).json({ success: false, message: 'Customer account not found after OTP verification.' });
                    }
                    const token = generateUserToken(user._id);
                    return res.json({
                        success: true,
                        message: 'Customer OTP verified and logged in successfully.',
                        token,
                        user: { _id: user._id, name: user.name, isPartner: false }
                    });
                }
            } else {
                console.log(`Step 2: OTP verification failed for ${fullPhoneNumber}. Twilio status: ${verificationCheck.status}`);
                return res.status(400).json({ success: false, message: 'Invalid OTP. Please try again.' });
            }

            return res.status(400).json({ success: false, message: 'Invalid mode for OTP verification.' });

        } catch (err) {
            console.error('‚ùå User Verify OTP Error (Twilio):', err);
            let errorMessage = 'OTP verification failed. An unexpected error occurred.';
            if (err.status === 404 && err.code === 20404) {
                 errorMessage = 'OTP expired or incorrect. Please request a new one.';
            } else if (err.status === 400 && err.code === 20404) {
                errorMessage = 'Incorrect OTP. Please try again.';
            }
            res.status(500).json({ success: false, message: errorMessage, twilioError: err.message });
        }
    });

    // ‡∞Æ‡±Ä ‡∞™‡∞æ‡∞§ ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç/‡∞∞‡∞ø‡∞ú‡∞ø‡∞∏‡±ç‡∞ü‡±ç‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞∞‡±Ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞á‡∞§‡∞∞ ‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç ‡∞∞‡±Ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞µ‡∞ö‡±ç‡∞ö‡±Å
    // ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞ï‡±Å:
    // router.post('/register', async (req, res) => { ... });
    // router.post('/login', async (req, res) => { ... });

    return router;
};