const mongoose = require('mongoose');

const BookingSchema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: false 
    },
    salon: {
        type: String, 
        required: true
    },
    serviceId: { 
        type: String,
        required: true
    },
    
    // --- FINANCIAL DETAILS (CRITICAL ADDITIONS) ---
    finalAmount: { 
        type: Number,
        required: true
    },
    platformFee: { 
        type: Number,
        required: true
    },
    salonShare: { 
        type: Number,
        required: true
    },
    paymentMethod: {
        type: String,
        enum: ['UPI/NETBANKING', 'CARD', 'CASHONSERVICE'],
        required: true
    },
    paymentStatus: {
        type: String,
        enum: ['Paid', 'Pending', 'Failed', 'Awaiting Service'],
        default: 'Pending'
    },
    
    // --- RAZORPAY INTEGRATION FIELD (CRITICAL ADDITION) ---
    razorpayOrderId: { // To store the order ID generated by Razorpay
        type: String,
        required: false 
    },
    
    // --- BOOKING DETAILS ---
    date: {
        type: Date,
        required: true
    },
    timeSlot: { 
        type: String,
        required: true 
    },
    customerName: { 
        type: String,
        required: false
    },
    customerPhone: { 
        type: String,
        required: false
    },
    bookingStatus: { 
        type: String,
        enum: ['CONFIRMED', 'COMPLETED', 'CANCELLED', 'PENDING'],
        default: 'PENDING' // Set default to PENDING to support Owner Approval Flow
    }
}, { timestamps: true });

const Booking = mongoose.model('Booking', BookingSchema);

module.exports = Booking;